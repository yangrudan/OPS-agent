2025-09-04T11:36:37.883412Z  INFO spawn_dataflow{build_id=Some(BuildId(01991483-7a24-7135-869a-97eae04cc847)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }, DataId("mem_result"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("query"), DataId("scheduler_result"), DataId("weather_request")} }, Node { id: NodeId("ops-mem-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991483-acf9-73fc-8eba-b4a7f25f446c`
2025-09-04T11:36:37.887857Z  INFO dora_coordinator: successfully spawned dataflow `01991483-acf9-73fc-8eba-b4a7f25f446c`
2025-09-04T11:38:08.560335Z  INFO dora_coordinator: successfully send stop dataflow `01991483-acf9-73fc-8eba-b4a7f25f446c` to all daemons
2025-09-04T11:38:14.759459Z  WARN dora_coordinator: Coordinator took 101ms for handling event: Log
2025-09-04T11:38:24.310539Z  INFO dora_coordinator: removed machine id: db0aba85-b38d-48ed-97d3-54e5f509bce4 from dataflow: 01991483-acf9-73fc-8eba-b4a7f25f446c
2025-09-04T11:38:47.544546Z  INFO spawn_dataflow{build_id=Some(BuildId(01991483-7a24-7135-869a-97eae04cc847)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }, DataId("mem_result"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("query"), DataId("scheduler_result"), DataId("weather_request")} }, Node { id: NodeId("ops-mem-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991485-a777-78bc-b4a2-c3a03625974f`
2025-09-04T11:38:47.548513Z  INFO dora_coordinator: successfully spawned dataflow `01991485-a777-78bc-b4a2-c3a03625974f`
2025-09-04T11:40:47.899685Z  INFO dora_coordinator: successfully send stop dataflow `01991485-a777-78bc-b4a2-c3a03625974f` to all daemons
2025-09-04T11:41:02.913478Z  INFO dora_coordinator: removed machine id: db0aba85-b38d-48ed-97d3-54e5f509bce4 from dataflow: 01991485-a777-78bc-b4a2-c3a03625974f
2025-09-04T11:41:02.913560Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T11:41:09.838281Z  INFO spawn_dataflow{build_id=Some(BuildId(01991483-7a24-7135-869a-97eae04cc847)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }, DataId("mem_result"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("query"), DataId("scheduler_result"), DataId("weather_request")} }, Node { id: NodeId("ops-mem-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991487-d34c-7d14-82b5-94aa08db2070`
2025-09-04T11:41:09.842229Z  INFO dora_coordinator: successfully spawned dataflow `01991487-d34c-7d14-82b5-94aa08db2070`
2025-09-04T11:42:15.301375Z  INFO dora_coordinator: successfully send stop dataflow `01991487-d34c-7d14-82b5-94aa08db2070` to all daemons
2025-09-04T11:42:30.362642Z  INFO dora_coordinator: removed machine id: db0aba85-b38d-48ed-97d3-54e5f509bce4 from dataflow: 01991487-d34c-7d14-82b5-94aa08db2070
2025-09-04T11:42:30.362754Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T11:42:32.085407Z  INFO spawn_dataflow{build_id=Some(BuildId(01991483-7a24-7135-869a-97eae04cc847)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }, DataId("mem_result"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("query"), DataId("scheduler_result"), DataId("weather_request")} }, Node { id: NodeId("ops-mem-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991489-1493-72cd-ae10-edbe9f396954`
2025-09-04T11:42:32.088981Z  INFO dora_coordinator: successfully spawned dataflow `01991489-1493-72cd-ae10-edbe9f396954`
2025-09-04T11:42:52.672825Z  INFO dora_coordinator: successfully send stop dataflow `01991489-1493-72cd-ae10-edbe9f396954` to all daemons
2025-09-04T11:43:08.267019Z  INFO spawn_dataflow{build_id=Some(BuildId(01991483-7a24-7135-869a-97eae04cc847)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }, DataId("mem_result"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem-agent"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("query"), DataId("scheduler_result"), DataId("weather_request")} }, Node { id: NodeId("ops-mem-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991489-a1e9-7ca2-820a-c3bd18e6bfb8`
2025-09-04T11:43:08.275047Z  INFO dora_coordinator: successfully spawned dataflow `01991489-a1e9-7ca2-820a-c3bd18e6bfb8`
2025-09-04T11:43:41.043702Z  INFO dora_coordinator: successfully send stop dataflow `01991489-a1e9-7ca2-820a-c3bd18e6bfb8` to all daemons
2025-09-04T11:43:56.081576Z  INFO dora_coordinator: removed machine id: 9194d6dc-43b7-4dd7-827c-a098e5fe50cf from dataflow: 01991489-a1e9-7ca2-820a-c3bd18e6bfb8
2025-09-04T11:43:56.081707Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T11:52:23.893230Z  INFO spawn_dataflow{build_id=None session_id=SessionId(01991491-d4b7-78ba-8af5-573926acc0c4) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/test_llm") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991492-1c54-7bd5-8195-568d2e6bd34d`
2025-09-04T11:52:23.894200Z  INFO dora_coordinator: removed machine id: 9194d6dc-43b7-4dd7-827c-a098e5fe50cf from dataflow: 01991492-1c54-7bd5-8195-568d2e6bd34d
2025-09-04T11:52:23.894231Z ERROR dora_coordinator: pending spawn result on dataflow finish    
2025-09-04T11:52:23.894251Z  WARN dora_coordinator: received DataflowSpawnResult, but no matching dataflow in `running_dataflows` map
2025-09-04T11:57:55.952083Z  INFO spawn_dataflow{build_id=Some(BuildId(01991497-13eb-7e1c-870f-ca0fbb670dad)) session_id=SessionId(01991494-ea88-7b06-8f66-1a30b90e2604) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/test_llm") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991497-2d6f-73b6-9fb9-3c409b3e7bd0`
2025-09-04T11:57:55.953301Z  INFO dora_coordinator: successfully spawned dataflow `01991497-2d6f-73b6-9fb9-3c409b3e7bd0`
2025-09-04T11:58:00.847500Z  INFO dora_coordinator: successfully send stop dataflow `01991497-2d6f-73b6-9fb9-3c409b3e7bd0` to all daemons
2025-09-04T11:58:15.864841Z  INFO dora_coordinator: removed machine id: 9194d6dc-43b7-4dd7-827c-a098e5fe50cf from dataflow: 01991497-2d6f-73b6-9fb9-3c409b3e7bd0
2025-09-04T11:58:15.864980Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T11:59:07.452682Z  INFO spawn_dataflow{build_id=Some(BuildId(01991497-13eb-7e1c-870f-ca0fbb670dad)) session_id=SessionId(01991494-ea88-7b06-8f66-1a30b90e2604) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/test_llm") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991498-44bb-76e5-8883-329d778c22dd`
2025-09-04T11:59:07.453809Z  INFO dora_coordinator: successfully spawned dataflow `01991498-44bb-76e5-8883-329d778c22dd`
2025-09-04T11:59:32.247819Z  INFO dora_coordinator: successfully send stop dataflow `01991498-44bb-76e5-8883-329d778c22dd` to all daemons
2025-09-04T11:59:36.701328Z  INFO spawn_dataflow{build_id=Some(BuildId(01991497-13eb-7e1c-870f-ca0fbb670dad)) session_id=SessionId(01991494-ea88-7b06-8f66-1a30b90e2604) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/test_llm") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991498-b6fc-7108-bcf4-d7bef1859545`
2025-09-04T11:59:36.702447Z  INFO dora_coordinator: successfully spawned dataflow `01991498-b6fc-7108-bcf4-d7bef1859545`
2025-09-04T11:59:47.262142Z  INFO dora_coordinator: removed machine id: 9194d6dc-43b7-4dd7-827c-a098e5fe50cf from dataflow: 01991498-44bb-76e5-8883-329d778c22dd
2025-09-04T11:59:47.262242Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T11:59:57.336928Z  INFO dora_coordinator: successfully send stop dataflow `01991498-b6fc-7108-bcf4-d7bef1859545` to all daemons
2025-09-04T12:00:12.349280Z  INFO dora_coordinator: removed machine id: 9194d6dc-43b7-4dd7-827c-a098e5fe50cf from dataflow: 01991498-b6fc-7108-bcf4-d7bef1859545
2025-09-04T12:00:12.349391Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T12:29:07.768110Z  INFO spawn_dataflow{build_id=Some(BuildId(019914b3-8594-74c9-9052-158f07bcd061)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("ops_llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("ops_llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019914b3-bd37-7ae5-aa0a-17ab456dc769`
2025-09-04T12:29:07.778294Z  INFO dora_coordinator: successfully spawned dataflow `019914b3-bd37-7ae5-aa0a-17ab456dc769`
2025-09-04T12:29:36.586334Z  INFO dora_coordinator: successfully send stop dataflow `019914b3-bd37-7ae5-aa0a-17ab456dc769` to all daemons
2025-09-04T12:29:51.645917Z  INFO dora_coordinator: removed machine id: 9194d6dc-43b7-4dd7-827c-a098e5fe50cf from dataflow: 019914b3-bd37-7ae5-aa0a-17ab456dc769
2025-09-04T12:29:51.646020Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T12:48:34.772442Z  INFO spawn_dataflow{build_id=Some(BuildId(019914c5-67fe-7b32-8672-c0882908816b)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019914c5-8bd1-71ad-8e09-4c77a13eb11f`
2025-09-04T12:48:34.778909Z  INFO dora_coordinator: successfully spawned dataflow `019914c5-8bd1-71ad-8e09-4c77a13eb11f`
2025-09-04T13:22:29.761011Z  INFO dora_coordinator: successfully send stop dataflow `019914c5-8bd1-71ad-8e09-4c77a13eb11f` to all daemons
2025-09-04T13:22:45.366345Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 019914c5-8bd1-71ad-8e09-4c77a13eb11f
2025-09-04T13:22:45.366409Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T13:25:10.620889Z  INFO spawn_dataflow{build_id=Some(BuildId(019914c5-67fe-7b32-8672-c0882908816b)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019914e7-0d5b-719f-b40b-9c7b832f1add`
2025-09-04T13:25:10.624761Z  INFO dora_coordinator: successfully spawned dataflow `019914e7-0d5b-719f-b40b-9c7b832f1add`
2025-09-04T13:28:09.105252Z  INFO dora_coordinator: successfully send stop dataflow `019914e7-0d5b-719f-b40b-9c7b832f1add` to all daemons
2025-09-04T13:28:24.134742Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 019914e7-0d5b-719f-b40b-9c7b832f1add
2025-09-04T13:28:24.134812Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T13:33:33.340563Z  INFO spawn_dataflow{build_id=Some(BuildId(019914c5-67fe-7b32-8672-c0882908816b)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019914ee-b91b-7b85-9132-b6f1b8dbb643`
2025-09-04T13:33:33.344971Z  INFO dora_coordinator: successfully spawned dataflow `019914ee-b91b-7b85-9132-b6f1b8dbb643`
2025-09-04T13:33:56.914980Z  INFO dora_coordinator: successfully send stop dataflow `019914ee-b91b-7b85-9132-b6f1b8dbb643` to all daemons
2025-09-04T13:34:12.303951Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 019914ee-b91b-7b85-9132-b6f1b8dbb643
2025-09-04T13:34:12.304011Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T14:50:01.627216Z  INFO spawn_dataflow{build_id=Some(BuildId(019914c5-67fe-7b32-8672-c0882908816b)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991534-bc18-7a03-b140-2d5e54c3fbfa`
2025-09-04T14:50:01.637671Z  WARN dora_coordinator: error while spawning dataflow `01991534-bc18-7a03-b140-2d5e54c3fbfa`
2025-09-04T14:50:07.693951Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 01991534-bc18-7a03-b140-2d5e54c3fbfa
2025-09-04T14:56:13.311448Z  INFO spawn_dataflow{build_id=Some(BuildId(01991537-b456-7440-9b76-74dbfc1abcb4)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("weather_query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `0199153a-67fd-78e9-9d85-a3b8eca137b8`
2025-09-04T14:56:13.318163Z  WARN dora_coordinator: error while spawning dataflow `0199153a-67fd-78e9-9d85-a3b8eca137b8`
2025-09-04T14:56:14.510585Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 0199153a-67fd-78e9-9d85-a3b8eca137b8
2025-09-04T14:58:04.593333Z  INFO spawn_dataflow{build_id=Some(BuildId(0199153b-a3ed-794b-995e-297e9e1c129a)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("weather_query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `0199153c-1aae-786d-bae3-60053d910b72`
2025-09-04T14:58:04.604953Z  WARN dora_coordinator: error while spawning dataflow `0199153c-1aae-786d-bae3-60053d910b72`
2025-09-04T14:58:10.069044Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 0199153c-1aae-786d-bae3-60053d910b72
2025-09-04T15:07:38.201538Z  INFO spawn_dataflow{build_id=Some(BuildId(01991544-b8ce-7f8c-a67a-79daa16ee0b5)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("weather_query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991544-db57-75d0-ab8f-a6dedb32090e`
2025-09-04T15:07:38.216324Z  INFO dora_coordinator: successfully spawned dataflow `01991544-db57-75d0-ab8f-a6dedb32090e`
2025-09-04T15:11:50.067698Z  INFO dora_coordinator: successfully send stop dataflow `01991544-db57-75d0-ab8f-a6dedb32090e` to all daemons
2025-09-04T15:11:55.687922Z  INFO spawn_dataflow{build_id=Some(BuildId(01991544-b8ce-7f8c-a67a-79daa16ee0b5)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("weather_query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991548-c926-7102-9481-2683ed86777d`
2025-09-04T15:11:55.708379Z  INFO dora_coordinator: successfully spawned dataflow `01991548-c926-7102-9481-2683ed86777d`
2025-09-04T15:12:05.764286Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 01991544-db57-75d0-ab8f-a6dedb32090e
2025-09-04T15:12:05.764373Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T15:12:52.298414Z  INFO dora_coordinator: successfully send stop dataflow `01991548-c926-7102-9481-2683ed86777d` to all daemons
2025-09-04T15:13:07.345045Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 01991548-c926-7102-9481-2683ed86777d
2025-09-04T15:13:07.345197Z ERROR dora_coordinator::control: failed to send reply
2025-09-04T15:15:26.936196Z  INFO spawn_dataflow{build_id=Some(BuildId(0199154b-c7e4-740d-aecf-2b1903d1fd8e)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("weather_query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `0199154c-0255-758d-bdd7-69a87e024715`
2025-09-04T15:15:26.949182Z  INFO dora_coordinator: successfully spawned dataflow `0199154c-0255-758d-bdd7-69a87e024715`
2025-09-04T15:16:17.139348Z  INFO dora_coordinator: successfully send stop dataflow `0199154c-0255-758d-bdd7-69a87e024715` to all daemons
2025-09-04T15:16:26.407910Z  INFO spawn_dataflow{build_id=Some(BuildId(0199154b-c7e4-740d-aecf-2b1903d1fd8e)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("weather_query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `0199154c-eaa6-7a9b-8d20-b5dc8d5c08c9`
2025-09-04T15:16:26.420610Z  INFO dora_coordinator: successfully spawned dataflow `0199154c-eaa6-7a9b-8d20-b5dc8d5c08c9`
2025-09-04T15:16:32.814130Z  INFO dora_coordinator: removed machine id: 85988c08-5d03-4990-9f36-972c02daa912 from dataflow: 0199154c-0255-758d-bdd7-69a87e024715
2025-09-04T15:16:32.814253Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T03:14:06.339720Z  INFO spawn_dataflow{build_id=Some(BuildId(019917db-deeb-7a65-9da7-560de96a7ecc)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019917dd-f581-7222-9f6f-6d53132f7c97`
2025-09-05T03:14:06.348885Z  INFO dora_coordinator: successfully spawned dataflow `019917dd-f581-7222-9f6f-6d53132f7c97`
2025-09-05T03:17:42.464444Z  INFO dora_coordinator: successfully send stop dataflow `019917dd-f581-7222-9f6f-6d53132f7c97` to all daemons
2025-09-05T03:17:47.523123Z  INFO spawn_dataflow{build_id=Some(BuildId(019917db-deeb-7a65-9da7-560de96a7ecc)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019917e1-5582-7449-84a5-a431a98bed98`
2025-09-05T03:17:47.534307Z  INFO dora_coordinator: successfully spawned dataflow `019917e1-5582-7449-84a5-a431a98bed98`
2025-09-05T03:17:58.128461Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 019917dd-f581-7222-9f6f-6d53132f7c97
2025-09-05T03:17:58.128531Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T03:19:32.366887Z  INFO dora_coordinator: successfully send stop dataflow `019917e1-5582-7449-84a5-a431a98bed98` to all daemons
2025-09-05T03:19:36.453912Z  INFO spawn_dataflow{build_id=Some(BuildId(019917db-deeb-7a65-9da7-560de96a7ecc)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019917e2-ff05-750e-94f8-e4ddddd6bf1b`
2025-09-05T03:19:36.469282Z  INFO dora_coordinator: successfully spawned dataflow `019917e2-ff05-750e-94f8-e4ddddd6bf1b`
2025-09-05T03:19:47.995394Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 019917e1-5582-7449-84a5-a431a98bed98
2025-09-05T03:19:47.995465Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T03:22:44.996400Z  INFO dora_coordinator: successfully send stop dataflow `019917e2-ff05-750e-94f8-e4ddddd6bf1b` to all daemons
2025-09-05T03:23:00.598401Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 019917e2-ff05-750e-94f8-e4ddddd6bf1b
2025-09-05T03:23:00.598469Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T04:25:39.891232Z  INFO spawn_dataflow{build_id=Some(BuildId(019917db-deeb-7a65-9da7-560de96a7ecc)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `0199181f-7930-7aff-98eb-d934c124e7ad`
2025-09-05T04:25:39.903654Z  INFO dora_coordinator: successfully spawned dataflow `0199181f-7930-7aff-98eb-d934c124e7ad`
2025-09-05T04:27:12.876568Z  INFO dora_coordinator: successfully send stop dataflow `0199181f-7930-7aff-98eb-d934c124e7ad` to all daemons
2025-09-05T04:27:28.495347Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 0199181f-7930-7aff-98eb-d934c124e7ad
2025-09-05T04:27:28.495430Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T04:31:53.268093Z  INFO spawn_dataflow{build_id=Some(BuildId(019917db-deeb-7a65-9da7-560de96a7ecc)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991825-2bb2-7f19-b95a-9454571372ed`
2025-09-05T04:31:53.277858Z  INFO dora_coordinator: successfully spawned dataflow `01991825-2bb2-7f19-b95a-9454571372ed`
2025-09-05T04:32:38.966805Z  INFO dora_coordinator: successfully send stop dataflow `01991825-2bb2-7f19-b95a-9454571372ed` to all daemons
2025-09-05T04:32:54.626815Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 01991825-2bb2-7f19-b95a-9454571372ed
2025-09-05T04:32:54.626885Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T05:54:20.587153Z  INFO spawn_dataflow{build_id=Some(BuildId(01991870-4ee2-7c37-9d39-3d8f00cf17c3)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991870-a929-7c8d-8b23-e13310f339ea`
2025-09-05T05:54:20.593304Z  INFO dora_coordinator: successfully spawned dataflow `01991870-a929-7c8d-8b23-e13310f339ea`
2025-09-05T05:54:26.036047Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 01991870-a929-7c8d-8b23-e13310f339ea
2025-09-05T05:54:38.263655Z  INFO spawn_dataflow{build_id=Some(BuildId(01991870-4ee2-7c37-9d39-3d8f00cf17c3)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991870-ee34-7c8f-96f4-d4f73457fb90`
2025-09-05T05:54:38.283174Z  INFO dora_coordinator: successfully spawned dataflow `01991870-ee34-7c8f-96f4-d4f73457fb90`
2025-09-05T05:55:32.081675Z  INFO dora_coordinator: successfully send stop dataflow `01991870-ee34-7c8f-96f4-d4f73457fb90` to all daemons
2025-09-05T05:55:34.438415Z  WARN dora_coordinator: Coordinator took 100ms for handling event: Log
2025-09-05T05:55:47.781003Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 01991870-ee34-7c8f-96f4-d4f73457fb90
2025-09-05T05:55:47.781067Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T08:23:58.187071Z  INFO spawn_dataflow{build_id=Some(BuildId(019918f9-6ff7-796d-8d79-2008c6a53373)) session_id=SessionId(019918f9-6ff6-7070-b53b-5e3318ec67a7) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mic"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("mic_node.py"), git: None, branch: None, tag: None, rev: None, args: None, build: None, send_stdout_as: None, inputs: {}, outputs: {DataId("audio")} }, Node { id: NodeId("vad"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("vad_node.py"), git: None, branch: None, tag: None, rev: None, args: None, build: None, send_stdout_as: None, inputs: {DataId("audio"): Input { mapping: User(UserInputMapping { source: NodeId("mic"), output: DataId("audio") }), queue_size: None }}, outputs: {DataId("voice_chunk")} }, Node { id: NodeId("asr"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("asr_node.py"), git: None, branch: None, tag: None, rev: None, args: None, build: None, send_stdout_as: None, inputs: {DataId("voice_chunk"): Input { mapping: User(UserInputMapping { source: NodeId("vad"), output: DataId("voice_chunk") }), queue_size: None }}, outputs: {DataId("asr_text")} }, Node { id: NodeId("llm"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("echo_llm_node.py"), git: None, branch: None, tag: None, rev: None, args: None, build: None, send_stdout_as: None, inputs: {DataId("asr_text"): Input { mapping: User(UserInputMapping { source: NodeId("asr"), output: DataId("asr_text") }), queue_size: None }}, outputs: {DataId("reply_text")} }, Node { id: NodeId("tts"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("tts_node.py"), git: None, branch: None, tag: None, rev: None, args: None, build: None, send_stdout_as: None, inputs: {DataId("tts_text"): Input { mapping: User(UserInputMapping { source: NodeId("llm"), output: DataId("reply_text") }), queue_size: None }}, outputs: {} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/test_voice") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019918f9-a5e9-74c5-adc7-a9e0207c4116`
2025-09-05T08:23:58.191640Z  INFO dora_coordinator: successfully spawned dataflow `019918f9-a5e9-74c5-adc7-a9e0207c4116`
2025-09-05T08:23:58.233358Z  INFO dora_coordinator: removed machine id: 3e836222-3a3b-4022-ab53-d5a8b6a1adec from dataflow: 019918f9-a5e9-74c5-adc7-a9e0207c4116
2025-09-05T12:55:14.388398Z  INFO spawn_dataflow{build_id=Some(BuildId(01991870-4ee2-7c37-9d39-3d8f00cf17c3)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019919f2-00d2-7966-a49e-4eebaac4880d`
2025-09-05T12:55:14.409163Z  INFO dora_coordinator: successfully spawned dataflow `019919f2-00d2-7966-a49e-4eebaac4880d`
2025-09-05T12:56:20.019460Z  INFO dora_coordinator: successfully send stop dataflow `019919f2-00d2-7966-a49e-4eebaac4880d` to all daemons
2025-09-05T12:56:35.168492Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 019919f2-00d2-7966-a49e-4eebaac4880d
2025-09-05T12:56:35.168630Z ERROR dora_coordinator::control: failed to send reply
2025-09-05T13:00:25.714400Z  INFO spawn_dataflow{build_id=Some(BuildId(019919f6-a7cf-77e9-b648-e33ef7ce58c1)) session_id=SessionId(01990d6c-d027-7d19-89c9-12dfe5716bc2) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("mock-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/mock-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("mock-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `019919f6-c0f0-7dbb-813d-3c02a1d92b82`
2025-09-05T13:00:25.733602Z  INFO dora_coordinator: successfully spawned dataflow `019919f6-c0f0-7dbb-813d-3c02a1d92b82`
2025-09-05T13:01:38.339353Z  INFO dora_coordinator: successfully send stop dataflow `019919f6-c0f0-7dbb-813d-3c02a1d92b82` to all daemons
2025-09-05T13:01:54.076892Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 019919f6-c0f0-7dbb-813d-3c02a1d92b82
2025-09-05T13:01:54.076975Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T02:53:31.162304Z  INFO spawn_dataflow{build_id=Some(BuildId(01991cf1-4826-7c52-8af7-158d0cfba202)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991cf1-7898-7f9a-9d78-d04942cc7ddf`
2025-09-06T02:53:31.181666Z  INFO dora_coordinator: successfully spawned dataflow `01991cf1-7898-7f9a-9d78-d04942cc7ddf`
2025-09-06T03:08:42.935914Z  INFO dora_coordinator: successfully send stop dataflow `01991cf1-7898-7f9a-9d78-d04942cc7ddf` to all daemons
2025-09-06T03:08:58.815757Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991cf1-7898-7f9a-9d78-d04942cc7ddf
2025-09-06T03:08:58.815878Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:10:01.365802Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d00-7e25-7862-bb59-0311920e30b2)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d00-9493-7a9b-99e6-49c6b99d46ee`
2025-09-06T03:10:01.387817Z  INFO dora_coordinator: successfully spawned dataflow `01991d00-9493-7a9b-99e6-49c6b99d46ee`
2025-09-06T03:10:30.526084Z  INFO dora_coordinator: successfully send stop dataflow `01991d00-9493-7a9b-99e6-49c6b99d46ee` to all daemons
2025-09-06T03:10:46.267674Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d00-9493-7a9b-99e6-49c6b99d46ee
2025-09-06T03:10:46.267795Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:12:57.297627Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d00-7e25-7862-bb59-0311920e30b2)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d03-43cf-7109-84c9-20eeaf3e3c04`
2025-09-06T03:12:57.316156Z  INFO dora_coordinator: successfully spawned dataflow `01991d03-43cf-7109-84c9-20eeaf3e3c04`
2025-09-06T03:13:04.460778Z  INFO dora_coordinator: successfully send stop dataflow `01991d03-43cf-7109-84c9-20eeaf3e3c04` to all daemons
2025-09-06T03:13:13.509039Z  WARN dora_coordinator: Coordinator took 101ms for handling event: Log
2025-09-06T03:13:20.323822Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d03-43cf-7109-84c9-20eeaf3e3c04
2025-09-06T03:14:07.967824Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d00-7e25-7862-bb59-0311920e30b2)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d04-57de-7011-af87-fc2ccb4e2a09`
2025-09-06T03:14:07.980156Z  INFO dora_coordinator: successfully spawned dataflow `01991d04-57de-7011-af87-fc2ccb4e2a09`
2025-09-06T03:24:34.267153Z  INFO dora_coordinator: successfully send stop dataflow `01991d04-57de-7011-af87-fc2ccb4e2a09` to all daemons
2025-09-06T03:24:49.874484Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d04-57de-7011-af87-fc2ccb4e2a09
2025-09-06T03:24:49.874627Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:25:28.498465Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d0e-a0f8-792c-884f-6d5e6fdb4ae4)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d0e-ba30-71ae-877f-5a0e5c0dec7a`
2025-09-06T03:25:28.513353Z  INFO dora_coordinator: successfully spawned dataflow `01991d0e-ba30-71ae-877f-5a0e5c0dec7a`
2025-09-06T03:26:15.861529Z  INFO dora_coordinator: successfully send stop dataflow `01991d0e-ba30-71ae-877f-5a0e5c0dec7a` to all daemons
2025-09-06T03:26:19.087341Z  WARN dora_coordinator: Coordinator took 101ms for handling event: Log
2025-09-06T03:26:31.318118Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d0e-ba30-71ae-877f-5a0e5c0dec7a
2025-09-06T03:26:31.318189Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:29:45.867499Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d0e-a0f8-792c-884f-6d5e6fdb4ae4)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d12-a789-7502-b17c-e0b203a5d35c`
2025-09-06T03:29:45.884993Z  INFO dora_coordinator: successfully spawned dataflow `01991d12-a789-7502-b17c-e0b203a5d35c`
2025-09-06T03:30:19.998520Z  INFO dora_coordinator: successfully send stop dataflow `01991d12-a789-7502-b17c-e0b203a5d35c` to all daemons
2025-09-06T03:30:22.905040Z  WARN dora_coordinator: Coordinator took 101ms for handling event: Log
2025-09-06T03:30:35.403279Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d12-a789-7502-b17c-e0b203a5d35c
2025-09-06T03:30:35.403356Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:35:32.313485Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d0e-a0f8-792c-884f-6d5e6fdb4ae4)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d17-f0d6-7f3b-bc53-48b8f99b97c5`
2025-09-06T03:35:32.348979Z  INFO dora_coordinator: successfully spawned dataflow `01991d17-f0d6-7f3b-bc53-48b8f99b97c5`
2025-09-06T03:35:54.157446Z  INFO dora_coordinator: successfully send stop dataflow `01991d17-f0d6-7f3b-bc53-48b8f99b97c5` to all daemons
2025-09-06T03:35:56.135412Z  WARN dora_coordinator: Coordinator took 101ms for handling event: Log
2025-09-06T03:36:09.567463Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d17-f0d6-7f3b-bc53-48b8f99b97c5
2025-09-06T03:36:09.567558Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:42:40.492503Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d0e-a0f8-792c-884f-6d5e6fdb4ae4)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d1e-796a-7337-9ae8-e983dbb45ecd`
2025-09-06T03:42:40.524197Z  INFO dora_coordinator: successfully spawned dataflow `01991d1e-796a-7337-9ae8-e983dbb45ecd`
2025-09-06T03:43:10.544377Z  INFO dora_coordinator: successfully send stop dataflow `01991d1e-796a-7337-9ae8-e983dbb45ecd` to all daemons
2025-09-06T03:43:26.087452Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d1e-796a-7337-9ae8-e983dbb45ecd
2025-09-06T03:43:26.087574Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:45:54.367749Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d20-f23f-7e17-a816-a025d90fec3b)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d21-6ebd-7cb2-bb4e-3d5abccfaf6b`
2025-09-06T03:45:54.394403Z  INFO dora_coordinator: successfully spawned dataflow `01991d21-6ebd-7cb2-bb4e-3d5abccfaf6b`
2025-09-06T03:46:06.947397Z  INFO dora_coordinator: successfully send stop dataflow `01991d21-6ebd-7cb2-bb4e-3d5abccfaf6b` to all daemons
2025-09-06T03:46:22.446100Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d21-6ebd-7cb2-bb4e-3d5abccfaf6b
2025-09-06T03:46:22.446194Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T03:51:17.574122Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d20-f23f-7e17-a816-a025d90fec3b)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d26-5d43-7ce5-9e07-e54b38634213`
2025-09-06T03:51:17.599714Z  INFO dora_coordinator: successfully spawned dataflow `01991d26-5d43-7ce5-9e07-e54b38634213`
2025-09-06T03:52:26.157574Z  INFO dora_coordinator: successfully send stop dataflow `01991d26-5d43-7ce5-9e07-e54b38634213` to all daemons
2025-09-06T03:52:28.296823Z  WARN dora_coordinator: Coordinator took 100ms for handling event: Log
2025-09-06T03:52:41.288124Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d26-5d43-7ce5-9e07-e54b38634213
2025-09-06T03:52:41.288209Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T04:04:27.924223Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d20-f23f-7e17-a816-a025d90fec3b)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d32-6c91-7a0a-88b6-40922ee45428`
2025-09-06T04:04:27.945356Z  INFO dora_coordinator: successfully spawned dataflow `01991d32-6c91-7a0a-88b6-40922ee45428`
2025-09-06T04:05:24.221265Z  INFO dora_coordinator: successfully send stop dataflow `01991d32-6c91-7a0a-88b6-40922ee45428` to all daemons
2025-09-06T04:05:26.417398Z  WARN dora_coordinator: Coordinator took 101ms for handling event: Log
2025-09-06T04:05:39.461785Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d32-6c91-7a0a-88b6-40922ee45428
2025-09-06T04:05:39.461859Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T04:07:31.014881Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d20-f23f-7e17-a816-a025d90fec3b)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d35-37c4-777f-8d13-161f674a5c87`
2025-09-06T04:07:31.040012Z  INFO dora_coordinator: successfully spawned dataflow `01991d35-37c4-777f-8d13-161f674a5c87`
2025-09-06T04:08:58.177459Z  INFO dora_coordinator: successfully send stop dataflow `01991d35-37c4-777f-8d13-161f674a5c87` to all daemons
2025-09-06T04:09:13.643978Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d35-37c4-777f-8d13-161f674a5c87
2025-09-06T04:09:13.644079Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T04:32:36.418568Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d20-f23f-7e17-a816-a025d90fec3b)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991d4c-3040-7278-90e2-092ce50df9a9`
2025-09-06T04:32:36.446113Z  INFO dora_coordinator: successfully spawned dataflow `01991d4c-3040-7278-90e2-092ce50df9a9`
2025-09-06T04:36:14.377204Z  INFO dora_coordinator: successfully send stop dataflow `01991d4c-3040-7278-90e2-092ce50df9a9` to all daemons
2025-09-06T04:36:16.033519Z  WARN dora_coordinator: Coordinator took 100ms for handling event: Log
2025-09-06T04:36:29.800688Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991d4c-3040-7278-90e2-092ce50df9a9
2025-09-06T08:13:06.151395Z  INFO spawn_dataflow{build_id=Some(BuildId(01991d20-f23f-7e17-a816-a025d90fec3b)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e16-0ee4-7f99-8981-2d66820cac93`
2025-09-06T08:13:06.172273Z  INFO dora_coordinator: successfully spawned dataflow `01991e16-0ee4-7f99-8981-2d66820cac93`
2025-09-06T08:15:51.097754Z  INFO dora_coordinator: successfully send stop dataflow `01991e16-0ee4-7f99-8981-2d66820cac93` to all daemons
2025-09-06T08:15:53.546326Z  WARN dora_coordinator: Coordinator took 100ms for handling event: Log
2025-09-06T08:16:06.941471Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e16-0ee4-7f99-8981-2d66820cac93
2025-09-06T08:16:06.941559Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T08:27:28.366966Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e23-36eb-7502-bdd6-bfb0039c608f`
2025-09-06T08:27:28.394065Z  INFO dora_coordinator: successfully spawned dataflow `01991e23-36eb-7502-bdd6-bfb0039c608f`
2025-09-06T08:28:13.316977Z  INFO dora_coordinator: successfully send stop dataflow `01991e23-36eb-7502-bdd6-bfb0039c608f` to all daemons
2025-09-06T08:28:29.047539Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e23-36eb-7502-bdd6-bfb0039c608f
2025-09-06T08:28:29.047645Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T08:32:20.319653Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e27-ab5c-7077-ab51-8471074b7657`
2025-09-06T08:32:20.344734Z  INFO dora_coordinator: successfully spawned dataflow `01991e27-ab5c-7077-ab51-8471074b7657`
2025-09-06T08:33:49.368979Z  INFO dora_coordinator: successfully send stop dataflow `01991e27-ab5c-7077-ab51-8471074b7657` to all daemons
2025-09-06T08:34:04.410144Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e27-ab5c-7077-ab51-8471074b7657
2025-09-06T08:34:04.410281Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T08:36:13.023181Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e2b-385c-71ad-a0d6-5eef85b80818`
2025-09-06T08:36:13.053398Z  INFO dora_coordinator: successfully spawned dataflow `01991e2b-385c-71ad-a0d6-5eef85b80818`
2025-09-06T08:37:51.043081Z  INFO dora_coordinator: successfully send stop dataflow `01991e2b-385c-71ad-a0d6-5eef85b80818` to all daemons
2025-09-06T08:38:06.062538Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e2b-385c-71ad-a0d6-5eef85b80818
2025-09-06T08:38:06.062653Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T08:38:34.726975Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e2d-61e3-7fa0-ab46-db8c586d48ea`
2025-09-06T08:38:34.746357Z  INFO dora_coordinator: successfully spawned dataflow `01991e2d-61e3-7fa0-ab46-db8c586d48ea`
2025-09-06T08:40:41.103772Z  INFO dora_coordinator: successfully send stop dataflow `01991e2d-61e3-7fa0-ab46-db8c586d48ea` to all daemons
2025-09-06T08:40:56.790615Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e2d-61e3-7fa0-ab46-db8c586d48ea
2025-09-06T08:40:56.790711Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T08:41:23.099635Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e2f-f398-7210-b7f1-e7bee238dded`
2025-09-06T08:41:23.123693Z  INFO dora_coordinator: successfully spawned dataflow `01991e2f-f398-7210-b7f1-e7bee238dded`
2025-09-06T08:42:34.195966Z  INFO dora_coordinator: successfully send stop dataflow `01991e2f-f398-7210-b7f1-e7bee238dded` to all daemons
2025-09-06T08:42:49.649499Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e2f-f398-7210-b7f1-e7bee238dded
2025-09-06T08:42:49.649667Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T08:43:47.957296Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e32-2972-730a-b30f-ebda356d3993`
2025-09-06T08:43:47.982311Z  INFO dora_coordinator: successfully spawned dataflow `01991e32-2972-730a-b30f-ebda356d3993`
2025-09-06T08:44:45.675087Z  INFO dora_coordinator: successfully send stop dataflow `01991e32-2972-730a-b30f-ebda356d3993` to all daemons
2025-09-06T08:45:01.131558Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e32-2972-730a-b30f-ebda356d3993
2025-09-06T08:45:01.131650Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T09:34:36.408031Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e60-ad75-7fe5-8d7b-96458cb94b98`
2025-09-06T09:34:36.430678Z  INFO dora_coordinator: successfully spawned dataflow `01991e60-ad75-7fe5-8d7b-96458cb94b98`
2025-09-06T09:36:00.761012Z  INFO dora_coordinator: successfully send stop dataflow `01991e60-ad75-7fe5-8d7b-96458cb94b98` to all daemons
2025-09-06T09:36:10.172930Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e1f-e705-78dc-b3ac-d93776dc0c92)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e62-1bbb-738d-9dbe-e165702c1ce7`
2025-09-06T09:36:10.191572Z  INFO dora_coordinator: successfully spawned dataflow `01991e62-1bbb-738d-9dbe-e165702c1ce7`
2025-09-06T09:36:15.804564Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e60-ad75-7fe5-8d7b-96458cb94b98
2025-09-06T09:36:15.804732Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T09:39:08.295072Z  INFO dora_coordinator: successfully send stop dataflow `01991e62-1bbb-738d-9dbe-e165702c1ce7` to all daemons
2025-09-06T09:39:23.312328Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e62-1bbb-738d-9dbe-e165702c1ce7
2025-09-06T09:39:23.312447Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T09:39:57.784791Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e65-7fee-7152-9c09-44250da295b5)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e65-94d5-7e94-a98d-53fdc2f03ef9`
2025-09-06T09:39:57.814873Z  INFO dora_coordinator: successfully spawned dataflow `01991e65-94d5-7e94-a98d-53fdc2f03ef9`
2025-09-06T09:42:44.601299Z  INFO dora_coordinator: successfully send stop dataflow `01991e65-94d5-7e94-a98d-53fdc2f03ef9` to all daemons
2025-09-06T09:43:00.334477Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e65-94d5-7e94-a98d-53fdc2f03ef9
2025-09-06T09:43:00.334582Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T09:46:20.644457Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e65-7fee-7152-9c09-44250da295b5)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e6b-6c62-7a07-9683-c13c97a66b7e`
2025-09-06T09:46:20.657673Z  INFO dora_coordinator: successfully spawned dataflow `01991e6b-6c62-7a07-9683-c13c97a66b7e`
2025-09-06T09:47:12.590611Z  INFO dora_coordinator: successfully send stop dataflow `01991e6b-6c62-7a07-9683-c13c97a66b7e` to all daemons
2025-09-06T09:47:27.967430Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e6b-6c62-7a07-9683-c13c97a66b7e
2025-09-06T09:47:27.967502Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T09:57:23.724701Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e75-7957-72f7-9f88-d02a087f2fde)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e75-8a8a-7d35-a212-1a58dcc992ef`
2025-09-06T09:57:23.743903Z  INFO dora_coordinator: successfully spawned dataflow `01991e75-8a8a-7d35-a212-1a58dcc992ef`
2025-09-06T09:58:29.277948Z  INFO dora_coordinator: successfully send stop dataflow `01991e75-8a8a-7d35-a212-1a58dcc992ef` to all daemons
2025-09-06T09:58:44.721289Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e75-8a8a-7d35-a212-1a58dcc992ef
2025-09-06T09:58:44.721362Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T10:03:25.811097Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e75-7957-72f7-9f88-d02a087f2fde)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e7b-10f1-7896-b1fb-1adc5f36a9f2`
2025-09-06T10:03:25.822629Z  INFO dora_coordinator: successfully spawned dataflow `01991e7b-10f1-7896-b1fb-1adc5f36a9f2`
2025-09-06T10:03:42.979132Z  INFO dora_coordinator: successfully send stop dataflow `01991e7b-10f1-7896-b1fb-1adc5f36a9f2` to all daemons
2025-09-06T10:03:57.764649Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e75-7957-72f7-9f88-d02a087f2fde)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e7b-8dbc-788b-ab45-5251d0b70b0b`
2025-09-06T10:03:57.814025Z  INFO dora_coordinator: successfully spawned dataflow `01991e7b-8dbc-788b-ab45-5251d0b70b0b`
2025-09-06T10:03:58.059353Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e7b-10f1-7896-b1fb-1adc5f36a9f2
2025-09-06T10:03:58.059581Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T10:07:36.788757Z  INFO dora_coordinator: successfully send stop dataflow `01991e7b-8dbc-788b-ab45-5251d0b70b0b` to all daemons
2025-09-06T10:07:47.852640Z  INFO spawn_dataflow{build_id=Some(BuildId(01991e75-7957-72f7-9f88-d02a087f2fde)) session_id=SessionId(01991cf0-d8ed-7e51-b259-eb7ac4411461) dataflow=Descriptor { communication: CommunicationConfig { local: Tcp, remote: Tcp }, deploy: None, nodes: [Node { id: NodeId("real-voice"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("dynamic"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/real-voice"), send_stdout_as: None, inputs: {DataId("agent_response"): Input { mapping: User(UserInputMapping { source: NodeId("ops-llm-agent"), output: DataId("llm_result") }), queue_size: None }}, outputs: {DataId("data")} }, Node { id: NodeId("ops-scheduler"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-scheduler"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../node-hub/ops-scheduler"), send_stdout_as: None, inputs: {DataId("input_event"): Input { mapping: User(UserInputMapping { source: NodeId("real-voice"), output: DataId("data") }), queue_size: None }}, outputs: {DataId("query")} }, Node { id: NodeId("ops-mem"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-mem"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-mem"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_mem_result")} }, Node { id: NodeId("ops-weather"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-weather"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-weather"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("ops_weather_result")} }, Node { id: NodeId("ops-miband"), name: None, description: None, env: None, deploy: None, operators: None, custom: None, operator: None, path: Some("ops-miband"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-miband"), send_stdout_as: None, inputs: {DataId("query"): Input { mapping: User(UserInputMapping { source: NodeId("ops-scheduler"), output: DataId("query") }), queue_size: None }}, outputs: {DataId("miband_result")} }, Node { id: NodeId("ops-llm-agent"), name: None, description: None, env: Some({"IS_DATAFLOW_END": Bool(true), "WRITE_LOG": Bool(true)}), deploy: None, operators: None, custom: None, operator: None, path: Some("ops-llm-agent"), git: None, branch: None, tag: None, rev: None, args: None, build: Some("pip install -e ../../agent-hub/ops-llm-agent"), send_stdout_as: None, inputs: {DataId("mem_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-mem"), output: DataId("ops_mem_result") }), queue_size: None }, DataId("miband_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-miband"), output: DataId("miband_result") }), queue_size: None }, DataId("weather_data"): Input { mapping: User(UserInputMapping { source: NodeId("ops-weather"), output: DataId("ops_weather_result") }), queue_size: None }}, outputs: {DataId("llm_result")} }], debug: Debug { publish_all_messages_to_zenoh: false } } local_working_dir=Some("/home/yang/worksapce/OPS-agent/examples/ops-agent-asr-tts") uv=false}: dora_coordinator::run: successfully triggered dataflow spawn `01991e7f-108b-77e1-b9ef-25ef27925e59`
2025-09-06T10:07:47.871776Z  INFO dora_coordinator: successfully spawned dataflow `01991e7f-108b-77e1-b9ef-25ef27925e59`
2025-09-06T10:07:52.547403Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e7b-8dbc-788b-ab45-5251d0b70b0b
2025-09-06T10:07:52.547509Z ERROR dora_coordinator::control: failed to send reply
2025-09-06T10:10:55.913022Z  INFO dora_coordinator: successfully send stop dataflow `01991e7f-108b-77e1-b9ef-25ef27925e59` to all daemons
2025-09-06T10:11:10.928676Z  INFO dora_coordinator: removed machine id: c6179327-2f09-47b8-bfc6-8ac944578571 from dataflow: 01991e7f-108b-77e1-b9ef-25ef27925e59
2025-09-06T10:11:10.928757Z ERROR dora_coordinator::control: failed to send reply
